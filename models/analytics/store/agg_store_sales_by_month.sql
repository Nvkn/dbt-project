{{ config(
    materialized='incremental',
    unique_key= ['STORE_KEY', 'T_CALENDAR_YEAR_MONTH']
) }}

WITH STORE_ORDER_SALES AS (
    SELECT
        ST_STOREKEY AS STORE_KEY,
        T_CALENDAR_YEAR_MONTH AS T_CALENDAR_YEAR_MONTH_ORDER,
        MAX(ST_NAME) AS STORE_NAME,
        MAX(S_TOTALPRICE_STORE) AS TOTALPRICE_ORDER,
        COUNT(S_ITEMKEY) AS DISTINCT_ITEMS_IN_ORDER,
        SUM(S_QUANTITY) AS AMOUNT_ITEMS_IN_ORDER,
        AVG(S_DISCOUNT) AS AVERAGE_DISCOUNT,
        COUNT_IF(S_OPERATIONTYPE LIKE 'SALE') AS NUM_SALES,
        COUNT_IF(S_OPERATIONTYPE LIKE 'RETURN') AS NUM_RETURN,
        COUNT_IF(S_EVENTKEY IS NOT NULL) AS IN_EVENT
    FROM {{ ref('fact_sales') }}
    JOIN {{ ref('dim_store') }} ON S_STOREKEY = ST_STOREKEY
    JOIN {{ ref('dim_time') }} ON T_TIMEKEY = S_ORDERDATEKEY_STORE
    GROUP BY ST_STOREKEY, S_ORDERKEY, T_CALENDAR_YEAR_MONTH_ORDER
), STORE_SALES AS (
    SELECT
        STORE_KEY,
        T_CALENDAR_YEAR_MONTH_ORDER AS T_CALENDAR_YEAR_MONTH,
        MAX(STORE_NAME) AS STORE_NAME,
        ROUND(SUM(TOTALPRICE_ORDER), 2) AS TOTAL_PRICE_ORDERS,
        ROUND(AVG(TOTALPRICE_ORDER), 2) AS AVG_PRICE_ORDER,
        ROUND(AVG(DISTINCT_ITEMS_IN_ORDER), 2) AS AVG_DISTINCT_ITEMS_IN_ORDER,
        SUM(IN_EVENT) AS DISTINCT_ITEMS_IN_ORDER_DURING_EVENT,
        ROUND(AVG(AMOUNT_ITEMS_IN_ORDER), 2) AS AVG_AMOUNT_ITEMS_IN_ORDER,
        SUM(AMOUNT_ITEMS_IN_ORDER) AS TOTAL_AMOUNT_ITEMS_SOLD,
        ROUND(AVG(AVERAGE_DISCOUNT), 2) AS AVERAGE_DISCOUNT,
        SUM(NUM_SALES) AS NUM_SALES,
        SUM(NUM_RETURN) AS NUM_RETURN
    FROM STORE_ORDER_SALES
    GROUP BY STORE_KEY, T_CALENDAR_YEAR_MONTH
)

SELECT
    STORE_KEY,
    T_CALENDAR_YEAR_MONTH,
    STORE_NAME,
    TOTAL_PRICE_ORDERS,
    AVG_PRICE_ORDER,
    AVG_DISTINCT_ITEMS_IN_ORDER,
    DISTINCT_ITEMS_IN_ORDER_DURING_EVENT,
    AVG_AMOUNT_ITEMS_IN_ORDER,
    TOTAL_AMOUNT_ITEMS_SOLD,
    AVERAGE_DISCOUNT,
    NUM_SALES,
    NUM_RETURN
FROM STORE_SALES
